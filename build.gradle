plugins {
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = mod_version
group = mod_group_id

base {
	archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
	mappings channel: mapping_channel, version: mapping_version
	copyIdeResources = true

	runs {
		configureEach {
			workingDirectory project.file('run')

			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		client {
			property 'forge.enabledGameTestNamespaces', mod_id
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
		}

		server {
			property 'forge.enabledGameTestNamespaces', mod_id
			args '--nogui'
		}

		gameTestServer {
			property 'forge.enabledGameTestNamespaces', mod_id
		}

		data {
			workingDirectory project.file('run-data')

			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
		}
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	maven {
		// location of the maven that hosts JEI files before January 2023
		name = "Progwml6's maven"
		url = "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		// location of the maven that hosts JEI files since January 2023
		name = "Jared's maven"
		url = "https://maven.blamejared.com/"
	}
	maven {
		// location of a maven mirror for JEI files, as a fallback
		name = "ModMaven"
		url = "https://modmaven.dev"
	}
	maven {
		//patchouli
		url 'https://maven.blamejared.com'
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
	compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))

	runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))

	compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
	runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
}

tasks.named('processResources', ProcessResources).configure {
	var replaceProperties = [
			minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
			forge_version       : forge_version, forge_version_range: forge_version_range,
			loader_version_range: loader_version_range,
			mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
			mod_authors         : mod_authors, mod_description: mod_description,
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}
}

tasks.named('jar', Jar).configure {
	manifest {
		attributes([
				'Specification-Title'     : mod_id,
				'Specification-Vendor'    : mod_authors,
				'Specification-Version'   : '1', // We are version 1 of ourselves
				'Implementation-Title'    : project.name,
				'Implementation-Version'  : project.jar.archiveVersion,
				'Implementation-Vendor'   : mod_authors,
				'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
	finalizedBy 'reobfJar'
}

publishing {
	publications {
		register('mavenJava', MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			url "file://${project.projectDir}/mcmodsrepo"
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}
